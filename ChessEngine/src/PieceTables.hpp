#pragma once


#include "Piece.hpp"
#include "DataStructures.hpp"

namespace Chess {
    namespace PieceTables {

        constexpr Array<int, 64> pawnTable = {
            0,  0,  0,  0,   0,   0,  0,  0,  50, 50, 50,  50, 50, 50,  50, 50,
            10, 10, 20, 30,  30,  20, 10, 10, 5,  5,  10,  25, 25, 10,  5,  5,
            0,  0,  0,  20,  20,  0,  0,  0,  5,  -5, -10, 0,  0,  -10, -5, 5,
            5,  10, 10, -20, -20, 10, 10, 5,  0,  0,  0,   0,  0,  0,   0,  0 };

        constexpr Array<int, 64> knightTable = {
            -50, -40, -30, -30, -30, -30, -40, -50, -40, -20, 0,   0,   0,
            0,   -20, -40, -30, 0,   10,  15,  15,  10,  0,   -30, -30, 5,
            15,  20,  20,  15,  5,   -30, -30, 0,   15,  20,  20,  15,  0,
            -30, -30, 5,   10,  15,  15,  10,  5,   -30, -40, -20, 0,   5,
            5,   0,   -20, -40, -50, -40, -30, -30, -30, -30, -40, -50 };

        constexpr Array<int, 64> bishopTable = {
            -20, -10, -10, -10, -10, -10, -10, -20, -10, 0,   0,   0,   0,
            0,   0,   -10, -10, 0,   5,   10,  10,  5,   0,   -10, -10, 5,
            5,   10,  10,  5,   5,   -10, -10, 0,   10,  10,  10,  10,  0,
            -10, -10, 10,  10,  10,  10,  10,  10,  -10, -10, 5,   0,   0,
            0,   0,   5,   -10, -20, -10, -10, -10, -10, -10, -10, -20 };

        constexpr Array<int, 64> rookTable = { 0,  0,  0, 0,  0, 0,  0,  0, 5,  10, 10, 10, 10,
                                       10, 10, 5, -5, 0, 0,  0,  0, 0,  0,  -5, -5, 0,
                                       0,  0,  0, 0,  0, -5, -5, 0, 0,  0,  0,  0,  0,
                                       -5, -5, 0, 0,  0, 0,  0,  0, -5, -5, 0,  0,  0,
                                       0,  0,  0, -5, 0, 0,  0,  5, 5,  0,  0,  0 };

        constexpr Array<int, 64> queenTable = {
            -20, -10, -10, -5, -5, -10, -10, -20, -10, 0,   0,   0,  0,  0,   0,   -10,
            -10, 0,   5,   5,  5,  5,   0,   -10, -5,  0,   5,   5,  5,  5,   0,   -5,
            0,   0,   5,   5,  5,  5,   0,   -5,  -10, 5,   5,   5,  5,  5,   0,   -10,
            -10, 0,   5,   0,  0,  0,   0,   -10, -20, -10, -10, -5, -5, -10, -10, -20 };

        constexpr Array<int, 64> kingTable = {
            -30, -40, -40, -50, -50, -40, -40, -30, -30, -40, -40, -50, -50,
            -40, -40, -30, -30, -40, -40, -50, -50, -40, -40, -30, -30, -40,
            -40, -50, -50, -40, -40, -30, -20, -30, -30, -40, -40, -30, -30,
            -20, -10, -20, -20, -20, -20, -20, -20, -10, 20,  20,  0,   0,
            0,   0,   20,  20,  20,  30,  10,  0,   0,   10,  30,  20 };

        inline const Array<const Array<int, 64>*, 6> tables = { &pawnTable, &bishopTable, &knightTable,
                                      &rookTable, &queenTable, &kingTable };

        int getValue(PieceType type, PieceColor color, uint8_t square) {
            const Array<int, 64>& table = *tables[static_cast<uint8_t>(type)];
            const int value = color == PieceColor::White
                ? table[square]
                : table[(7 - (square / 8)) * 8 + square % 8];
            return value;
        }
    }; 
}